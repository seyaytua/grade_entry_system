name: 手動リリース作成

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'リリースバージョン (例: v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'リリースノート'
        required: false
        type: string
        default: ''
      prerelease:
        description: 'プレリリースとしてマーク'
        required: false
        type: boolean
        default: false

jobs:
  validate-version:
    name: バージョン検証
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is_valid: ${{ steps.validate.outputs.is_valid }}
    
    steps:
    - name: バージョン形式を検証
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # v接頭辞を追加（ない場合）
        if [[ ! "$VERSION" =~ ^v ]]; then
          VERSION="v$VERSION"
        fi
        
        # セマンティックバージョニング形式をチェック
        if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "is_valid=true" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ バージョン形式が正しいです: $VERSION"
        else
          echo "is_valid=false" >> $GITHUB_OUTPUT
          echo "❌ バージョン形式が正しくありません: $VERSION"
          echo "正しい形式: v1.0.0, v1.2.3-beta など"
          exit 1
        fi

  build-and-release:
    name: ビルド & リリース作成
    needs: validate-version
    runs-on: windows-latest
    if: needs.validate-version.outputs.is_valid == 'true'
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: リリース用ビルド実行
      run: |
        echo "🔨 リリース ${{ needs.validate-version.outputs.version }} 用ビルドを開始"
        python build_windows.py

    - name: ビルド結果検証
      run: |
        if (Test-Path "dist\GradeEntrySystem\GradeEntrySystem.exe") {
          $size = (Get-Item "dist\GradeEntrySystem\GradeEntrySystem.exe").Length
          Write-Host "✅ リリースビルド成功"
          Write-Host "📁 実行ファイルサイズ: $([math]::Round($size / 1MB, 2)) MB"
          
          # ビルド情報をファイルに保存
          $buildInfo = @{
            version = "${{ needs.validate-version.outputs.version }}"
            build_date = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
            file_size_mb = [math]::Round($size / 1MB, 2)
            python_version = (python --version)
          } | ConvertTo-Json
          
          $buildInfo | Out-File -FilePath "dist\GradeEntrySystem\build-info.json" -Encoding UTF8
          Write-Host "📄 ビルド情報を保存しました"
        } else {
          Write-Host "❌ リリースビルド失敗"
          exit 1
        }

    - name: リリースファイルを準備
      run: |
        $VERSION = "${{ needs.validate-version.outputs.version }}"
        $ZIP_NAME = "GradeEntrySystem-Windows-$VERSION.zip"
        
        # 配布ファイルにREADMEを追加
        Copy-Item "README.md" "dist\GradeEntrySystem\"
        Copy-Item "WINDOWS_BUILD_GUIDE.md" "dist\GradeEntrySystem\"
        
        # ライセンスファイルがあれば追加
        if (Test-Path "LICENSE") {
          Copy-Item "LICENSE" "dist\GradeEntrySystem\"
        }
        
        # ZIPファイル作成
        Compress-Archive -Path "dist\GradeEntrySystem\*" -DestinationPath $ZIP_NAME -Force
        
        $zipSize = (Get-Item $ZIP_NAME).Length
        Write-Host "📦 リリースファイル作成完了: $ZIP_NAME"
        Write-Host "📁 ZIPファイルサイズ: $([math]::Round($zipSize / 1MB, 2)) MB"
        
        echo "ZIP_NAME=$ZIP_NAME" >> $env:GITHUB_ENV

    - name: リリースノートを準備
      run: |
        $VERSION = "${{ needs.validate-version.outputs.version }}"
        $CUSTOM_NOTES = "${{ github.event.inputs.release_notes }}"
        
        $releaseNotes = @"
## 🎯 成績入力システム $VERSION

Windows用配布ファイルです。

### 📦 ダウンロード・インストール方法

1. **${{ env.ZIP_NAME }}** をダウンロード
2. ZIPファイルを任意のフォルダに解凍  
3. 解凍したフォルダ内の **GradeEntrySystem.exe** を実行

### ⚠️ 初回実行時の注意事項

- Windows Defenderの警告が表示される場合があります
- 「詳細情報」→「実行」をクリックして実行してください
- 管理者として実行することを推奨します

### 🔧 システム要件

- Windows 10 以上
- Microsoft Visual C++ 再頒布可能パッケージ (通常は自動インストール済み)

### 📝 主な機能

- 📊 成績入力（画像プレビュー付き）
- 📚 講座管理
- 👥 生徒名簿管理
- 📈 成績一覧表示・エクスポート
- 📄 PDF分割機能
"@

        if ($CUSTOM_NOTES -ne "") {
          $releaseNotes += @"


### 🆕 このリリースでの変更点

$CUSTOM_NOTES
"@
        }

        $releaseNotes += @"


### 🆘 サポート

問題が発生した場合は、[Issuesページ](https://github.com/${{ github.repository }}/issues)でお知らせください。

---

**ビルド情報**
- ビルド日時: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
- Python バージョン: $(python --version)
- ファイルサイズ: $([math]::Round((Get-Item '${{ env.ZIP_NAME }}').Length / 1MB, 2)) MB
"@
        
        # リリースノートをファイルに保存
        $releaseNotes | Out-File -FilePath "release-notes.md" -Encoding UTF8
        Write-Host "📝 リリースノートを準備しました"

    - name: Gitタグを作成
      run: |
        $VERSION = "${{ needs.validate-version.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # タグが既に存在するかチェック
        git tag -l $VERSION
        if ($LASTEXITCODE -eq 0) {
          Write-Host "⚠️ タグ $VERSION は既に存在します"
        } else {
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION
          Write-Host "✅ タグ $VERSION を作成しました"
        }

    - name: GitHub リリースを作成
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-version.outputs.version }}
        name: 成績入力システム ${{ needs.validate-version.outputs.version }}
        body_path: release-notes.md
        files: ${{ env.ZIP_NAME }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: リリース完了通知
      run: |
        $VERSION = "${{ needs.validate-version.outputs.version }}"
        Write-Host ""
        Write-Host "🎉 リリース $VERSION が正常に作成されました！"
        Write-Host ""
        Write-Host "📋 リリース情報:"
        Write-Host "  - バージョン: $VERSION"
        Write-Host "  - ファイル: ${{ env.ZIP_NAME }}"
        Write-Host "  - プレリリース: ${{ github.event.inputs.prerelease }}"
        Write-Host ""
        Write-Host "🔗 リリースページ:"
        Write-Host "  https://github.com/${{ github.repository }}/releases/tag/$VERSION"
        Write-Host ""
        Write-Host "📥 ダウンロードURL:"
        Write-Host "  https://github.com/${{ github.repository }}/releases/download/$VERSION/${{ env.ZIP_NAME }}"