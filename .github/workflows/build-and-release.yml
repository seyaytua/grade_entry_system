name: Windows配布ファイル自動ビルド & リリース

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動実行を可能にする

jobs:
  test:
    name: テスト実行
    runs-on: ubuntu-latest
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: ビルド前テスト実行
      run: |
        python test_before_build.py || true  # GUI関連エラーは無視

    - name: インポートテスト
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            import database
            import models  
            import views
            import utils
            import config
            print('✅ すべてのモジュールのインポートに成功')
        except Exception as e:
            print(f'❌ インポートエラー: {e}')
            sys.exit(1)
        "

  build-windows:
    name: Windows実行ファイルビルド
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Windows用実行ファイルをビルド
      run: |
        python build_windows.py

    - name: ビルド結果確認
      run: |
        if (Test-Path "dist\GradeEntrySystem\GradeEntrySystem.exe") {
          Write-Host "✅ ビルド成功: GradeEntrySystem.exe が生成されました"
          $size = (Get-Item "dist\GradeEntrySystem\GradeEntrySystem.exe").Length
          Write-Host "📁 ファイルサイズ: $($size / 1MB) MB"
        } else {
          Write-Host "❌ ビルド失敗: 実行ファイルが生成されませんでした"
          exit 1
        }

    - name: 配布ファイルをZIPで圧縮
      run: |
        $version = if ($env:GITHUB_REF -match "refs/tags/(.*)") { $matches[1] } else { "latest" }
        $zipName = "GradeEntrySystem-Windows-$version.zip"
        Compress-Archive -Path "dist\GradeEntrySystem\*" -DestinationPath $zipName
        Write-Host "📦 配布ファイル作成: $zipName"
        echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: 配布ファイルをアーティファクトとしてアップロード
      uses: actions/upload-artifact@v3
      with:
        name: windows-distribution
        path: ${{ env.ZIP_NAME }}
        retention-days: 30

    - name: リリース作成 (タグプッシュ時のみ)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ZIP_NAME }}
        name: 成績入力システム ${{ env.VERSION }}
        body: |
          ## 🎯 成績入力システム ${{ env.VERSION }}
          
          Windows用配布ファイルです。
          
          ### 📦 ダウンロード・インストール方法
          
          1. **GradeEntrySystem-Windows-${{ env.VERSION }}.zip** をダウンロード
          2. ZIPファイルを任意のフォルダに解凍
          3. 解凍したフォルダ内の **GradeEntrySystem.exe** を実行
          
          ### ⚠️ 初回実行時の注意事項
          
          - Windows Defenderの警告が表示される場合があります
          - 「詳細情報」→「実行」をクリックして実行してください
          - 管理者として実行することを推奨します
          
          ### 🔧 システム要件
          
          - Windows 10 以上
          - Microsoft Visual C++ 再頒布可能パッケージ (通常は自動インストール済み)
          
          ### 📝 主な機能
          
          - 成績入力（画像プレビュー付き）
          - 講座管理
          - 生徒名簿管理  
          - 成績一覧表示・エクスポート
          - PDF分割機能
          
          ### 🆘 サポート
          
          問題が発生した場合は、Issuesページでお知らせください。
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-info:
    name: ビルド情報表示
    needs: [test, build-windows]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: ビルド結果サマリー
      run: |
        echo "## 🔨 ビルド結果サマリー" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ **テスト**: 成功" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **テスト**: 失敗" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-windows.result }}" == "success" ]; then
          echo "✅ **Windows ビルド**: 成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 配布ファイル" >> $GITHUB_STEP_SUMMARY
          echo "- Windows用実行ファイル（ZIP形式）がArtifactsに保存されました" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "- リリースページに自動的にアップロードされました" >> $GITHUB_STEP_SUMMARY
          fi
        elif [ "${{ needs.build-windows.result }}" == "skipped" ]; then
          echo "⏭️ **Windows ビルド**: スキップ（非mainブランチ）" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Windows ビルド**: 失敗" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 次のステップ" >> $GITHUB_STEP_SUMMARY
        echo "- 配布ファイルをテストしてください" >> $GITHUB_STEP_SUMMARY
        echo "- 問題がなければリリースタグを作成してください（例: \`git tag v1.0.0 && git push origin v1.0.0\`）" >> $GITHUB_STEP_SUMMARY