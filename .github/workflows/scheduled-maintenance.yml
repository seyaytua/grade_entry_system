name: 定期メンテナンス & 依存関係チェック

on:
  schedule:
    # 毎週月曜日 9:00 (JST) に実行
    - cron: '0 0 * * MON'
  workflow_dispatch:  # 手動実行を可能にする

jobs:
  dependency-check:
    name: 依存関係セキュリティチェック
    runs-on: ubuntu-latest
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: セキュリティ脆弱性チェック (Safety)
      run: |
        safety check --json --output safety-report.json || true
        if [ -f safety-report.json ]; then
          echo "🔍 セキュリティレポートを生成しました"
        fi

    - name: コードセキュリティ分析 (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "🔍 コードセキュリティレポートを生成しました"
        fi

    - name: 依存関係の更新チェック
      run: |
        pip list --outdated --format=json > outdated-packages.json
        if [ -s outdated-packages.json ] && [ "$(cat outdated-packages.json)" != "[]" ]; then
          echo "📦 更新可能なパッケージが見つかりました"
          cat outdated-packages.json
        else
          echo "✅ すべてのパッケージが最新です"
        fi

    - name: レポートファイルをアップロード
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          outdated-packages.json
        retention-days: 30

  build-health-check:
    name: ビルドヘルスチェック
    runs-on: windows-latest
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: 定期ビルドテスト
      run: |
        python build_windows.py

    - name: ビルド成功確認
      run: |
        if (Test-Path "dist\GradeEntrySystem\GradeEntrySystem.exe") {
          $size = (Get-Item "dist\GradeEntrySystem\GradeEntrySystem.exe").Length
          Write-Host "✅ 定期ビルドテスト成功"
          Write-Host "📁 実行ファイルサイズ: $([math]::Round($size / 1MB, 2)) MB"
          
          # ファイルサイズの変化をチェック
          $sizeMB = [math]::Round($size / 1MB, 2)
          if ($sizeMB -gt 200) {
            Write-Host "⚠️ 実行ファイルサイズが大きくなっています ($sizeMB MB)"
          }
        } else {
          Write-Host "❌ 定期ビルドテスト失敗"
          exit 1
        }

  create-maintenance-report:
    name: メンテナンスレポート作成
    needs: [dependency-check, build-health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: メンテナンスレポート作成
      run: |
        echo "# 📊 定期メンテナンスレポート" > maintenance-report.md
        echo "" >> maintenance-report.md
        echo "**実行日時**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> maintenance-report.md
        echo "" >> maintenance-report.md
        
        echo "## 🔍 チェック結果" >> maintenance-report.md
        echo "" >> maintenance-report.md
        
        if [ "${{ needs.dependency-check.result }}" == "success" ]; then
          echo "✅ **依存関係セキュリティチェック**: 正常" >> maintenance-report.md
        else
          echo "❌ **依存関係セキュリティチェック**: 問題あり" >> maintenance-report.md
        fi
        
        if [ "${{ needs.build-health-check.result }}" == "success" ]; then
          echo "✅ **ビルドヘルスチェック**: 正常" >> maintenance-report.md
        else
          echo "❌ **ビルドヘルスチェック**: 問題あり" >> maintenance-report.md
        fi
        
        echo "" >> maintenance-report.md
        echo "## 📋 推奨アクション" >> maintenance-report.md
        echo "" >> maintenance-report.md
        
        if [ "${{ needs.dependency-check.result }}" != "success" ] || [ "${{ needs.build-health-check.result }}" != "success" ]; then
          echo "- セキュリティレポートを確認してください" >> maintenance-report.md
          echo "- 必要に応じて依存関係を更新してください" >> maintenance-report.md
          echo "- ビルドエラーがある場合は修正してください" >> maintenance-report.md
        else
          echo "- すべてのチェックが正常に完了しました" >> maintenance-report.md
          echo "- 特に対処が必要な問題はありません" >> maintenance-report.md
        fi
        
        echo "" >> maintenance-report.md
        echo "---" >> maintenance-report.md
        echo "*このレポートは自動生成されました*" >> maintenance-report.md

    - name: レポートをアップロード
      uses: actions/upload-artifact@v3
      with:
        name: maintenance-report
        path: maintenance-report.md
        retention-days: 90

    - name: 問題があればIssue作成
      if: needs.dependency-check.result != 'success' || needs.build-health-check.result != 'success'
      uses: actions/github-script@v6
      with:
        script: |
          const title = `🚨 定期メンテナンス: 問題が検出されました (${new Date().toISOString().split('T')[0]})`;
          
          let body = `## 📊 定期メンテナンスで問題が検出されました\n\n`;
          body += `**検出日時**: ${new Date().toISOString()}\n\n`;
          
          body += `### 🔍 チェック結果\n\n`;
          body += `- **依存関係セキュリティチェック**: ${'${{ needs.dependency-check.result }}' === 'success' ? '✅ 正常' : '❌ 問題あり'}\n`;
          body += `- **ビルドヘルスチェック**: ${'${{ needs.build-health-check.result }}' === 'success' ? '✅ 正常' : '❌ 問題あり'}\n\n`;
          
          body += `### 📋 必要なアクション\n\n`;
          if ('${{ needs.dependency-check.result }}' !== 'success') {
            body += `- [ ] セキュリティレポートを確認\n`;
            body += `- [ ] 脆弱な依存関係を更新\n`;
          }
          if ('${{ needs.build-health-check.result }}' !== 'success') {
            body += `- [ ] ビルドエラーを調査・修正\n`;
          }
          
          body += `\n### 🔗 関連リンク\n\n`;
          body += `- [アクション実行ログ](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
          body += `- [セキュリティレポート](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n`;
          
          body += `---\n*この Issue は自動生成されました*`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['maintenance', 'automated']
          });