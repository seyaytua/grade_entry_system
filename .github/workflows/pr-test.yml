name: プルリクエスト自動テスト

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  lint-and-test:
    name: コード品質チェック & テスト
    runs-on: ubuntu-latest
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort

    - name: コードフォーマットチェック (Black)
      run: |
        black --check --diff . || echo "⚠️ コードフォーマットの問題があります。'black .' を実行してください。"

    - name: インポート順序チェック (isort)
      run: |
        isort --check-only --diff . || echo "⚠️ インポート順序の問題があります。'isort .' を実行してください。"

    - name: 構文チェック (flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: モジュールインポートテスト
      run: |
        python -c "
        import sys
        sys.path.append('.')
        
        modules_to_test = [
            'database',
            'database.db_manager',
            'models.course',
            'models.student', 
            'models.grade',
            'utils.csv_handler',
            'utils.radio_button_helper',
            'config.settings',
        ]
        
        failed = []
        for module in modules_to_test:
            try:
                __import__(module)
                print(f'✅ {module}')
            except Exception as e:
                print(f'❌ {module}: {e}')
                failed.append(module)
        
        if failed:
            print(f'\\n失敗したモジュール数: {len(failed)}')
            sys.exit(1)
        else:
            print(f'\\n✅ 全 {len(modules_to_test)} モジュールのインポートに成功')
        "

    - name: PySide6基本テスト
      run: |
        python -c "
        try:
            from PySide6.QtWidgets import QApplication
            from PySide6.QtCore import QTimer
            print('✅ PySide6インポート成功')
        except ImportError as e:
            print(f'❌ PySide6インポートエラー: {e}')
            exit(1)
        except Exception as e:
            print(f'⚠️ PySide6テスト警告: {e} (ヘッドレス環境では正常)')
        "

  windows-build-test:
    name: Windows ビルドテスト
    runs-on: windows-latest
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: PyInstallerビルドテスト (dry-run)
      run: |
        echo "PyInstaller設定チェック中..."
        pyinstaller --noconfirm --log-level=DEBUG grade_entry_system.spec --distpath test_dist --workpath test_build

    - name: ビルド結果確認
      run: |
        if (Test-Path "test_dist\GradeEntrySystem\GradeEntrySystem.exe") {
          Write-Host "✅ Windows ビルドテスト成功"
          $size = (Get-Item "test_dist\GradeEntrySystem\GradeEntrySystem.exe").Length
          Write-Host "📁 テスト実行ファイルサイズ: $([math]::Round($size / 1MB, 2)) MB"
        } else {
          Write-Host "❌ Windows ビルドテスト失敗"
          exit 1
        }

  comment-results:
    name: テスト結果コメント
    needs: [lint-and-test, windows-build-test]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: テスト結果をコメント
      uses: actions/github-script@v6
      with:
        script: |
          const lintResult = '${{ needs.lint-and-test.result }}';
          const buildResult = '${{ needs.windows-build-test.result }}';
          
          let comment = '## 🔍 プルリクエスト自動テスト結果\n\n';
          
          // テスト結果
          comment += '### テスト実行結果\n';
          comment += `- **コード品質チェック**: ${lintResult === 'success' ? '✅ 成功' : '❌ 失敗'}\n`;
          comment += `- **Windowsビルドテスト**: ${buildResult === 'success' ? '✅ 成功' : '❌ 失敗'}\n\n`;
          
          // 詳細情報
          if (lintResult === 'success' && buildResult === 'success') {
            comment += '### ✅ すべてのテストが成功しました！\n';
            comment += 'このプルリクエストは安全にマージできます。\n\n';
            comment += '#### 次のステップ\n';
            comment += '1. コードレビューを実施\n';
            comment += '2. 問題がなければマージ\n';
            comment += '3. マージ後、mainブランチで自動ビルド & リリースが実行されます\n';
          } else {
            comment += '### ⚠️ 一部のテストが失敗しました\n';
            comment += '詳細は上記のアクション実行ログを確認してください。\n\n';
            comment += '#### 修正が必要な項目\n';
            if (lintResult !== 'success') {
              comment += '- コード品質の問題を修正してください\n';
            }
            if (buildResult !== 'success') {
              comment += '- Windowsビルドエラーを修正してください\n';
            }
          }
          
          comment += '\n---\n*このコメントは自動生成されました*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });